// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Block;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReqStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Share;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Work;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ServerStats;
}  // namespace protobuf_protocol_2eproto
namespace pool {
namespace proto {
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block>
      _instance;
} _Block_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal>
      _instance;
} _Signal_default_instance_;
class ClientStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientStats>
      _instance;
} _ClientStats_default_instance_;
class ShareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Share>
      _instance;
} _Share_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
} _Request_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo>
      _instance;
} _ServerInfo_default_instance_;
class WorkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Work>
      _instance;
} _Work_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reply>
      _instance;
} _Reply_default_instance_;
class ReqStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqStats>
      _instance;
} _ReqStats_default_instance_;
class ServerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerStats>
      _instance;
} _ServerStats_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Data>
      _instance;
} _Data_default_instance_;
}  // namespace proto
}  // namespace pool
namespace protobuf_protocol_2eproto {
static void InitDefaultsBlock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_Block_default_instance_;
    new (ptr) ::pool::proto::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::Block::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Block =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlock}, {}};

static void InitDefaultsSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_Signal_default_instance_;
    new (ptr) ::pool::proto::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::Signal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Signal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignal}, {
      &protobuf_protocol_2eproto::scc_info_Block.base,}};

static void InitDefaultsClientStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_ClientStats_default_instance_;
    new (ptr) ::pool::proto::ClientStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::ClientStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClientStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClientStats}, {}};

static void InitDefaultsShare() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_Share_default_instance_;
    new (ptr) ::pool::proto::Share();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::Share::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Share =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShare}, {}};

static void InitDefaultsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_Request_default_instance_;
    new (ptr) ::pool::proto::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRequest}, {
      &protobuf_protocol_2eproto::scc_info_Share.base,
      &protobuf_protocol_2eproto::scc_info_ClientStats.base,}};

static void InitDefaultsServerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_ServerInfo_default_instance_;
    new (ptr) ::pool::proto::ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::ServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ServerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServerInfo}, {}};

static void InitDefaultsWork() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_Work_default_instance_;
    new (ptr) ::pool::proto::Work();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::Work::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Work =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWork}, {}};

static void InitDefaultsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_Reply_default_instance_;
    new (ptr) ::pool::proto::Reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::Reply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Reply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReply}, {
      &protobuf_protocol_2eproto::scc_info_ServerInfo.base,
      &protobuf_protocol_2eproto::scc_info_Work.base,
      &protobuf_protocol_2eproto::scc_info_Block.base,}};

static void InitDefaultsReqStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_ReqStats_default_instance_;
    new (ptr) ::pool::proto::ReqStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::ReqStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqStats}, {}};

static void InitDefaultsServerStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_ServerStats_default_instance_;
    new (ptr) ::pool::proto::ServerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::ServerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerStats}, {
      &protobuf_protocol_2eproto::scc_info_ReqStats.base,}};

static void InitDefaultsData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pool::proto::_Data_default_instance_;
    new (ptr) ::pool::proto::Data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pool::proto::Data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Data =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsData}, {
      &protobuf_protocol_2eproto::scc_info_Share.base,
      &protobuf_protocol_2eproto::scc_info_ClientStats.base,
      &protobuf_protocol_2eproto::scc_info_ServerStats.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Block.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Share.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Work.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Data.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Block, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Block, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Block, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Block, prevhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Block, reqdiff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Block, minshare_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Signal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Signal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Signal, block_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, cpd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, temp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, ngpus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ClientStats, height_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  9,
  10,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, gpuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, merkle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, multi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, blockhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, chaintype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, isblock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Share, genvalue_),
  0,
  1,
  6,
  7,
  2,
  3,
  8,
  9,
  10,
  4,
  5,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, reqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, reqnonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, share_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Request, stats_),
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerInfo, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerInfo, router_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerInfo, pub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerInfo, target_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Work, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Work, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Work, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Work, merkle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Work, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Work, bits_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, reqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, errstr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, sinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Reply, block_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ReqStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ReqStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ReqStats, reqtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ReqStats, errtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ReqStats, count_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, thread_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, workers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, cpd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::ServerStats, reqstats_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Data, share_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Data, clientstats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pool::proto::Data, serverstats_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::pool::proto::Block)},
  { 15, 22, sizeof(::pool::proto::Signal)},
  { 24, 40, sizeof(::pool::proto::ClientStats)},
  { 51, 72, sizeof(::pool::proto::Share)},
  { 88, 100, sizeof(::pool::proto::Request)},
  { 107, 116, sizeof(::pool::proto::ServerInfo)},
  { 120, 129, sizeof(::pool::proto::Work)},
  { 133, 145, sizeof(::pool::proto::Reply)},
  { 152, 160, sizeof(::pool::proto::ReqStats)},
  { 163, 174, sizeof(::pool::proto::ServerStats)},
  { 180, 188, sizeof(::pool::proto::Data)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_Signal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_ClientStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_Share_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_Work_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_Reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_ReqStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_ServerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pool::proto::_Data_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016protocol.proto\022\npool.proto\"Z\n\005Block\022\016\n"
      "\006height\030\001 \002(\r\022\014\n\004hash\030\002 \002(\t\022\020\n\010prevhash\030"
      "\003 \002(\t\022\017\n\007reqdiff\030\004 \002(\r\022\020\n\010minshare\030\005 \002(\r"
      "\"u\n\006Signal\022%\n\004type\030\001 \002(\0162\027.pool.proto.Si"
      "gnal.Type\022 \n\005block\030\002 \001(\0132\021.pool.proto.Bl"
      "ock\"\"\n\004Type\022\014\n\010NEWBLOCK\020\001\022\014\n\010SHUTDOWN\020\002\""
      "\273\001\n\013ClientStats\022\014\n\004addr\030\001 \002(\t\022\014\n\004name\030\002 "
      "\002(\t\022\020\n\010clientid\030\003 \002(\006\022\022\n\ninstanceid\030\004 \002("
      "\006\022\017\n\007version\030\n \002(\r\022\013\n\003cpd\030\013 \002(\002\022\017\n\007laten"
      "cy\030\014 \002(\r\022\014\n\004temp\030\r \002(\r\022\016\n\006errors\030\016 \002(\r\022\r"
      "\n\005ngpus\030\017 \002(\r\022\016\n\006height\030\020 \002(\r\"\205\002\n\005Share\022"
      "\014\n\004addr\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010clientid\030"
      "\003 \002(\006\022\r\n\005gpuid\030\004 \001(\r\022\014\n\004hash\030\n \002(\t\022\016\n\006me"
      "rkle\030\013 \002(\t\022\014\n\004time\030\014 \002(\r\022\014\n\004bits\030\r \002(\r\022\r"
      "\n\005nonce\030\016 \002(\r\022\r\n\005multi\030\017 \002(\t\022\021\n\tblockhas"
      "h\030\020 \001(\t\022\016\n\006height\030\024 \002(\r\022\016\n\006length\030\025 \002(\r\022"
      "\021\n\tchaintype\030\026 \002(\r\022\017\n\007isblock\030\027 \002(\010\022\020\n\010g"
      "envalue\030\030 \001(\004\"\211\002\n\007Request\022&\n\004type\030\001 \002(\0162"
      "\030.pool.proto.Request.Type\022\r\n\005reqid\030\002 \002(\r"
      "\022\017\n\007version\030\n \001(\r\022\016\n\006height\030\013 \001(\r\022\020\n\010req"
      "nonce\030\014 \001(\014\022 \n\005share\030\024 \001(\0132\021.pool.proto."
      "Share\022&\n\005stats\030\025 \001(\0132\027.pool.proto.Client"
      "Stats\"J\n\004Type\022\010\n\004NONE\020\000\022\013\n\007CONNECT\020\001\022\013\n\007"
      "GETWORK\020\002\022\t\n\005SHARE\020\003\022\t\n\005STATS\020\004\022\010\n\004PING\020"
      "\005\"G\n\nServerInfo\022\014\n\004host\030\001 \002(\t\022\016\n\006router\030"
      "\002 \002(\r\022\013\n\003pub\030\003 \002(\r\022\016\n\006target\030\004 \002(\r\"B\n\004Wo"
      "rk\022\016\n\006height\030\001 \002(\r\022\016\n\006merkle\030\002 \002(\t\022\014\n\004ti"
      "me\030\003 \002(\r\022\014\n\004bits\030\004 \002(\r\"\304\002\n\005Reply\022&\n\004type"
      "\030\001 \002(\0162\030.pool.proto.Request.Type\022\r\n\005reqi"
      "d\030\002 \002(\r\022(\n\005error\030\n \002(\0162\031.pool.proto.Repl"
      "y.ErrType\022\016\n\006errstr\030\013 \001(\t\022%\n\005sinfo\030\024 \001(\013"
      "2\026.pool.proto.ServerInfo\022\036\n\004work\030\025 \001(\0132\020"
      ".pool.proto.Work\022 \n\005block\030\026 \001(\0132\021.pool.p"
      "roto.Block\"a\n\007ErrType\022\010\n\004NONE\020\000\022\013\n\007VERSI"
      "ON\020\001\022\n\n\006HEIGHT\020\002\022\014\n\010REQNONCE\020\003\022\t\n\005STALE\020"
      "\004\022\013\n\007INVALID\020\005\022\r\n\tDUPLICATE\020\006\"p\n\010ReqStat"
      "s\022)\n\007reqtype\030\001 \002(\0162\030.pool.proto.Request."
      "Type\022*\n\007errtype\030\002 \002(\0162\031.pool.proto.Reply"
      ".ErrType\022\r\n\005count\030\003 \002(\r\"\202\001\n\013ServerStats\022"
      "\014\n\004name\030\001 \002(\t\022\016\n\006thread\030\002 \002(\r\022\017\n\007workers"
      "\030\n \002(\r\022\017\n\007latency\030\013 \002(\r\022\013\n\003cpd\030\014 \002(\002\022&\n\010"
      "reqstats\030\024 \003(\0132\024.pool.proto.ReqStats\"\204\001\n"
      "\004Data\022 \n\005share\030\001 \001(\0132\021.pool.proto.Share\022"
      ",\n\013clientstats\030\002 \001(\0132\027.pool.proto.Client"
      "Stats\022,\n\013serverstats\030\003 \001(\0132\027.pool.proto."
      "ServerStats"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2eproto
namespace pool {
namespace proto {
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::NEWBLOCK;
const Signal_Type Signal::SHUTDOWN;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Request_Type_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[1];
}
bool Request_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_Type Request::NONE;
const Request_Type Request::CONNECT;
const Request_Type Request::GETWORK;
const Request_Type Request::SHARE;
const Request_Type Request::STATS;
const Request_Type Request::PING;
const Request_Type Request::Type_MIN;
const Request_Type Request::Type_MAX;
const int Request::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Reply_ErrType_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[2];
}
bool Reply_ErrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_ErrType Reply::NONE;
const Reply_ErrType Reply::VERSION;
const Reply_ErrType Reply::HEIGHT;
const Reply_ErrType Reply::REQNONCE;
const Reply_ErrType Reply::STALE;
const Reply_ErrType Reply::INVALID;
const Reply_ErrType Reply::DUPLICATE;
const Reply_ErrType Reply::ErrType_MIN;
const Reply_ErrType Reply::ErrType_MAX;
const int Reply::ErrType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Block::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kHeightFieldNumber;
const int Block::kHashFieldNumber;
const int Block::kPrevhashFieldNumber;
const int Block::kReqdiffFieldNumber;
const int Block::kMinshareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Block.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  prevhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prevhash()) {
    prevhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prevhash_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&minshare_) -
    reinterpret_cast<char*>(&height_)) + sizeof(minshare_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.Block)
}

void Block::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minshare_) -
      reinterpret_cast<char*>(&height_)) + sizeof(minshare_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:pool.proto.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Block& Block::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Block.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      prevhash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minshare_) -
        reinterpret_cast<char*>(&height_)) + sizeof(minshare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Block)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Block.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string prevhash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prevhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prevhash().data(), static_cast<int>(this->prevhash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Block.prevhash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 reqdiff = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reqdiff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqdiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 minshare = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_minshare();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minshare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 height = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // required string hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // required string prevhash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prevhash().data(), static_cast<int>(this->prevhash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.prevhash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->prevhash(), output);
  }

  // required uint32 reqdiff = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqdiff(), output);
  }

  // required uint32 minshare = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minshare(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 height = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // required string hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // required string prevhash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prevhash().data(), static_cast<int>(this->prevhash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Block.prevhash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prevhash(), target);
  }

  // required uint32 reqdiff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqdiff(), target);
  }

  // required uint32 minshare = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minshare(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Block)
  return target;
}

size_t Block::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Block)
  size_t total_size = 0;

  if (has_hash()) {
    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_prevhash()) {
    // required string prevhash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prevhash());
  }

  if (has_height()) {
    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_reqdiff()) {
    // required uint32 reqdiff = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqdiff());
  }

  if (has_minshare()) {
    // required uint32 minshare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minshare());
  }

  return total_size;
}
size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Block)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required string prevhash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prevhash());

    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 reqdiff = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqdiff());

    // required uint32 minshare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minshare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_prevhash();
      prevhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prevhash_);
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      reqdiff_ = from.reqdiff_;
    }
    if (cached_has_bits & 0x00000010u) {
      minshare_ = from.minshare_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prevhash_.Swap(&other->prevhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(reqdiff_, other->reqdiff_);
  swap(minshare_, other->minshare_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::pool::proto::_Signal_default_instance_._instance.get_mutable()->block_ = const_cast< ::pool::proto::Block*>(
      ::pool::proto::Block::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kTypeFieldNumber;
const int Signal::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Signal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::pool::proto::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pool.proto.Signal)
}

void Signal::SharedCtor() {
  block_ = NULL;
  type_ = 1;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:pool.proto.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Signal.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(block_ != NULL);
      block_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Signal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Signal.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Signal_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Signal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.Block block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Signal.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pool.proto.Block block = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Signal.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pool.proto.Block block = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_block(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Signal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .pool.proto.Signal.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional .pool.proto.Block block = 2;
  if (has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_block()->::pool::proto::Block::MergeFrom(from.block());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_block()) {
    if (!this->block_->IsInitialized()) return false;
  }
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  swap(block_, other->block_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientStats::kAddrFieldNumber;
const int ClientStats::kNameFieldNumber;
const int ClientStats::kClientidFieldNumber;
const int ClientStats::kInstanceidFieldNumber;
const int ClientStats::kVersionFieldNumber;
const int ClientStats::kCpdFieldNumber;
const int ClientStats::kLatencyFieldNumber;
const int ClientStats::kTempFieldNumber;
const int ClientStats::kErrorsFieldNumber;
const int ClientStats::kNgpusFieldNumber;
const int ClientStats::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientStats::ClientStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_ClientStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ClientStats)
}
ClientStats::ClientStats(const ClientStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&clientid_, &from.clientid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ngpus_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(ngpus_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.ClientStats)
}

void ClientStats::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ngpus_) -
      reinterpret_cast<char*>(&clientid_)) + sizeof(ngpus_));
}

ClientStats::~ClientStats() {
  // @@protoc_insertion_point(destructor:pool.proto.ClientStats)
  SharedDtor();
}

void ClientStats::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientStats::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientStats& ClientStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_ClientStats.base);
  return *internal_default_instance();
}


void ClientStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&clientid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_) -
        reinterpret_cast<char*>(&clientid_)) + sizeof(latency_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&temp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ngpus_) -
        reinterpret_cast<char*>(&temp_)) + sizeof(ngpus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ClientStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ClientStats.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ClientStats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 clientid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_clientid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clientid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 instanceid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float cpd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_cpd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 latency = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 temp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_temp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 errors = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_errors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ngpus = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_ngpus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngpus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ClientStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ClientStats)
  return false;
#undef DO_
}

void ClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required fixed64 clientid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clientid(), output);
  }

  // required fixed64 instanceid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->instanceid(), output);
  }

  // required uint32 version = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version(), output);
  }

  // required float cpd = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cpd(), output);
  }

  // required uint32 latency = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->latency(), output);
  }

  // required uint32 temp = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->temp(), output);
  }

  // required uint32 errors = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->errors(), output);
  }

  // required uint32 ngpus = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ngpus(), output);
  }

  // required uint32 height = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ClientStats)
}

::google::protobuf::uint8* ClientStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ClientStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ClientStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required fixed64 clientid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clientid(), target);
  }

  // required fixed64 instanceid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->instanceid(), target);
  }

  // required uint32 version = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version(), target);
  }

  // required float cpd = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cpd(), target);
  }

  // required uint32 latency = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->latency(), target);
  }

  // required uint32 temp = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->temp(), target);
  }

  // required uint32 errors = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->errors(), target);
  }

  // required uint32 ngpus = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ngpus(), target);
  }

  // required uint32 height = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ClientStats)
  return target;
}

size_t ClientStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ClientStats)
  size_t total_size = 0;

  if (has_addr()) {
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_clientid()) {
    // required fixed64 clientid = 3;
    total_size += 1 + 8;
  }

  if (has_instanceid()) {
    // required fixed64 instanceid = 4;
    total_size += 1 + 8;
  }

  if (has_version()) {
    // required uint32 version = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_cpd()) {
    // required float cpd = 11;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required uint32 height = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_latency()) {
    // required uint32 latency = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  if (has_temp()) {
    // required uint32 temp = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temp());
  }

  if (has_errors()) {
    // required uint32 errors = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());
  }

  if (has_ngpus()) {
    // required uint32 ngpus = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngpus());
  }

  return total_size;
}
size_t ClientStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ClientStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required fixed64 clientid = 3;
    total_size += 1 + 8;

    // required fixed64 instanceid = 4;
    total_size += 1 + 8;

    // required uint32 version = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required float cpd = 11;
    total_size += 1 + 4;

    // required uint32 height = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 latency = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());

    // required uint32 temp = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->temp());

    // required uint32 errors = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());

    // required uint32 ngpus = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngpus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ClientStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ClientStats)
    MergeFrom(*source);
  }
}

void ClientStats::MergeFrom(const ClientStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ClientStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00000008u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      cpd_ = from.cpd_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      latency_ = from.latency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      temp_ = from.temp_;
    }
    if (cached_has_bits & 0x00000200u) {
      errors_ = from.errors_;
    }
    if (cached_has_bits & 0x00000400u) {
      ngpus_ = from.ngpus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStats::CopyFrom(const ClientStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ClientStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ClientStats::Swap(ClientStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStats::InternalSwap(ClientStats* other) {
  using std::swap;
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clientid_, other->clientid_);
  swap(instanceid_, other->instanceid_);
  swap(version_, other->version_);
  swap(cpd_, other->cpd_);
  swap(height_, other->height_);
  swap(latency_, other->latency_);
  swap(temp_, other->temp_);
  swap(errors_, other->errors_);
  swap(ngpus_, other->ngpus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientStats::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Share::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Share::kAddrFieldNumber;
const int Share::kNameFieldNumber;
const int Share::kClientidFieldNumber;
const int Share::kGpuidFieldNumber;
const int Share::kHashFieldNumber;
const int Share::kMerkleFieldNumber;
const int Share::kTimeFieldNumber;
const int Share::kBitsFieldNumber;
const int Share::kNonceFieldNumber;
const int Share::kMultiFieldNumber;
const int Share::kBlockhashFieldNumber;
const int Share::kHeightFieldNumber;
const int Share::kLengthFieldNumber;
const int Share::kChaintypeFieldNumber;
const int Share::kIsblockFieldNumber;
const int Share::kGenvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Share::Share()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Share.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Share)
}
Share::Share(const Share& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  merkle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_merkle()) {
    merkle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_);
  }
  multi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_multi()) {
    multi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multi_);
  }
  blockhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_blockhash()) {
    blockhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockhash_);
  }
  ::memcpy(&clientid_, &from.clientid_,
    static_cast<size_t>(reinterpret_cast<char*>(&genvalue_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(genvalue_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.Share)
}

void Share::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clientid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&genvalue_) -
      reinterpret_cast<char*>(&clientid_)) + sizeof(genvalue_));
}

Share::~Share() {
  // @@protoc_insertion_point(destructor:pool.proto.Share)
  SharedDtor();
}

void Share::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Share::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Share::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Share& Share::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Share.base);
  return *internal_default_instance();
}


void Share::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Share)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      addr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      merkle_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      multi_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      blockhash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&clientid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpuid_) -
        reinterpret_cast<char*>(&clientid_)) + sizeof(gpuid_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&genvalue_) -
        reinterpret_cast<char*>(&time_)) + sizeof(genvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Share::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Share)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed64 clientid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_clientid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clientid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gpuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hash = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string merkle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->merkle().data(), static_cast<int>(this->merkle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.merkle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bits = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nonce = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_nonce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string multi = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multi().data(), static_cast<int>(this->multi().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.multi");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string blockhash = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blockhash().data(), static_cast<int>(this->blockhash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Share.blockhash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 height = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 length = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 chaintype = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_chaintype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chaintype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isblock = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_isblock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 genvalue = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_genvalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &genvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Share)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Share)
  return false;
#undef DO_
}

void Share::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Share)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required fixed64 clientid = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clientid(), output);
  }

  // optional uint32 gpuid = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gpuid(), output);
  }

  // required string hash = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->hash(), output);
  }

  // required string merkle = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), static_cast<int>(this->merkle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.merkle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->merkle(), output);
  }

  // required uint32 time = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time(), output);
  }

  // required uint32 bits = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->bits(), output);
  }

  // required uint32 nonce = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nonce(), output);
  }

  // required string multi = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi().data(), static_cast<int>(this->multi().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.multi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->multi(), output);
  }

  // optional string blockhash = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockhash().data(), static_cast<int>(this->blockhash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.blockhash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->blockhash(), output);
  }

  // required uint32 height = 20;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->height(), output);
  }

  // required uint32 length = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->length(), output);
  }

  // required uint32 chaintype = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->chaintype(), output);
  }

  // required bool isblock = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isblock(), output);
  }

  // optional uint64 genvalue = 24;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->genvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Share)
}

::google::protobuf::uint8* Share::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Share)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required fixed64 clientid = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clientid(), target);
  }

  // optional uint32 gpuid = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gpuid(), target);
  }

  // required string hash = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hash(), target);
  }

  // required string merkle = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), static_cast<int>(this->merkle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.merkle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->merkle(), target);
  }

  // required uint32 time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time(), target);
  }

  // required uint32 bits = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->bits(), target);
  }

  // required uint32 nonce = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->nonce(), target);
  }

  // required string multi = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi().data(), static_cast<int>(this->multi().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.multi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->multi(), target);
  }

  // optional string blockhash = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blockhash().data(), static_cast<int>(this->blockhash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Share.blockhash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->blockhash(), target);
  }

  // required uint32 height = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->height(), target);
  }

  // required uint32 length = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->length(), target);
  }

  // required uint32 chaintype = 22;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->chaintype(), target);
  }

  // required bool isblock = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isblock(), target);
  }

  // optional uint64 genvalue = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->genvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Share)
  return target;
}

size_t Share::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Share)
  size_t total_size = 0;

  if (has_addr()) {
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_hash()) {
    // required string hash = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_merkle()) {
    // required string merkle = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());
  }

  if (has_multi()) {
    // required string multi = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multi());
  }

  if (has_clientid()) {
    // required fixed64 clientid = 3;
    total_size += 1 + 8;
  }

  if (has_time()) {
    // required uint32 time = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_bits()) {
    // required uint32 bits = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());
  }

  if (has_nonce()) {
    // required uint32 nonce = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nonce());
  }

  if (has_height()) {
    // required uint32 height = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_length()) {
    // required uint32 length = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  if (has_chaintype()) {
    // required uint32 chaintype = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chaintype());
  }

  if (has_isblock()) {
    // required bool isblock = 23;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t Share::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Share)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00007f5f) ^ 0x00007f5f) == 0) {  // All required fields are present.
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string hash = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required string merkle = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());

    // required string multi = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->multi());

    // required fixed64 clientid = 3;
    total_size += 1 + 8;

    // required uint32 time = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 bits = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());

    // required uint32 nonce = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nonce());

    // required uint32 height = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 length = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

    // required uint32 chaintype = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chaintype());

    // required bool isblock = 23;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string blockhash = 16;
  if (has_blockhash()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blockhash());
  }

  // optional uint32 gpuid = 4;
  if (has_gpuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gpuid());
  }

  // optional uint64 genvalue = 24;
  if (has_genvalue()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->genvalue());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Share::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Share)
  GOOGLE_DCHECK_NE(&from, this);
  const Share* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Share>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Share)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Share)
    MergeFrom(*source);
  }
}

void Share::MergeFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Share)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_merkle();
      merkle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_multi();
      multi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.multi_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_blockhash();
      blockhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockhash_);
    }
    if (cached_has_bits & 0x00000040u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00000080u) {
      gpuid_ = from.gpuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000200u) {
      bits_ = from.bits_;
    }
    if (cached_has_bits & 0x00000400u) {
      nonce_ = from.nonce_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00002000u) {
      chaintype_ = from.chaintype_;
    }
    if (cached_has_bits & 0x00004000u) {
      isblock_ = from.isblock_;
    }
    if (cached_has_bits & 0x00008000u) {
      genvalue_ = from.genvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Share::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Share::CopyFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Share::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007f5f) != 0x00007f5f) return false;
  return true;
}

void Share::Swap(Share* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Share::InternalSwap(Share* other) {
  using std::swap;
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merkle_.Swap(&other->merkle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  multi_.Swap(&other->multi_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockhash_.Swap(&other->blockhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clientid_, other->clientid_);
  swap(gpuid_, other->gpuid_);
  swap(time_, other->time_);
  swap(bits_, other->bits_);
  swap(nonce_, other->nonce_);
  swap(height_, other->height_);
  swap(length_, other->length_);
  swap(chaintype_, other->chaintype_);
  swap(isblock_, other->isblock_);
  swap(genvalue_, other->genvalue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Share::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::pool::proto::_Request_default_instance_._instance.get_mutable()->share_ = const_cast< ::pool::proto::Share*>(
      ::pool::proto::Share::internal_default_instance());
  ::pool::proto::_Request_default_instance_._instance.get_mutable()->stats_ = const_cast< ::pool::proto::ClientStats*>(
      ::pool::proto::ClientStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kTypeFieldNumber;
const int Request::kReqidFieldNumber;
const int Request::kVersionFieldNumber;
const int Request::kHeightFieldNumber;
const int Request::kReqnonceFieldNumber;
const int Request::kShareFieldNumber;
const int Request::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reqnonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reqnonce()) {
    reqnonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reqnonce_);
  }
  if (from.has_share()) {
    share_ = new ::pool::proto::Share(*from.share_);
  } else {
    share_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::pool::proto::ClientStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&type_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.Request)
}

void Request::SharedCtor() {
  reqnonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&share_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&share_)) + sizeof(height_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:pool.proto.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  reqnonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete share_;
  if (this != internal_default_instance()) delete stats_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Request.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      reqnonce_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(share_ != NULL);
      share_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->Clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&type_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reqid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes reqnonce = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqnonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.Share share = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_share()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.ClientStats stats = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Request.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 reqid = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // optional uint32 version = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version(), output);
  }

  // optional uint32 height = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->height(), output);
  }

  // optional bytes reqnonce = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->reqnonce(), output);
  }

  // optional .pool.proto.Share share = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_share(), output);
  }

  // optional .pool.proto.ClientStats stats = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Request.Type type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 reqid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // optional uint32 version = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version(), target);
  }

  // optional uint32 height = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->height(), target);
  }

  // optional bytes reqnonce = 12;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->reqnonce(), target);
  }

  // optional .pool.proto.Share share = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_share(), deterministic, target);
  }

  // optional .pool.proto.ClientStats stats = 21;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_stats(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Request)
  return target;
}

size_t Request::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Request)
  size_t total_size = 0;

  if (has_type()) {
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_reqid()) {
    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());
  }

  return total_size;
}
size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes reqnonce = 12;
    if (has_reqnonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqnonce());
    }

    // optional .pool.proto.Share share = 20;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *share_);
    }

    // optional .pool.proto.ClientStats stats = 21;
    if (has_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_);
    }

  }
  if (_has_bits_[0 / 32] & 96u) {
    // optional uint32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 height = 11;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reqnonce();
      reqnonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reqnonce_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_share()->::pool::proto::Share::MergeFrom(from.share());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stats()->::pool::proto::ClientStats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;
  if (has_share()) {
    if (!this->share_->IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  reqnonce_.Swap(&other->reqnonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(share_, other->share_);
  swap(stats_, other->stats_);
  swap(type_, other->type_);
  swap(reqid_, other->reqid_);
  swap(version_, other->version_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kHostFieldNumber;
const int ServerInfo::kRouterFieldNumber;
const int ServerInfo::kPubFieldNumber;
const int ServerInfo::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_ServerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ::memcpy(&router_, &from.router_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&router_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.ServerInfo)
}

void ServerInfo::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&router_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&router_)) + sizeof(target_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:pool.proto.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfo& ServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_ServerInfo.base);
  return *internal_default_instance();
}


void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&router_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_) -
        reinterpret_cast<char*>(&router_)) + sizeof(target_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ServerInfo.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 router = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_router();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 pub = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pub();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerInfo.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required uint32 router = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->router(), output);
  }

  // required uint32 pub = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pub(), output);
  }

  // required uint32 target = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerInfo.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required uint32 router = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->router(), target);
  }

  // required uint32 pub = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pub(), target);
  }

  // required uint32 target = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ServerInfo)
  return target;
}

size_t ServerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ServerInfo)
  size_t total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_router()) {
    // required uint32 router = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->router());
  }

  if (has_pub()) {
    // required uint32 pub = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pub());
  }

  if (has_target()) {
    // required uint32 target = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());
  }

  return total_size;
}
size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required uint32 router = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->router());

    // required uint32 pub = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pub());

    // required uint32 target = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      router_ = from.router_;
    }
    if (cached_has_bits & 0x00000004u) {
      pub_ = from.pub_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_ = from.target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(router_, other->router_);
  swap(pub_, other->pub_);
  swap(target_, other->target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Work::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Work::kHeightFieldNumber;
const int Work::kMerkleFieldNumber;
const int Work::kTimeFieldNumber;
const int Work::kBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Work::Work()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Work.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Work)
}
Work::Work(const Work& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merkle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_merkle()) {
    merkle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&bits_) -
    reinterpret_cast<char*>(&height_)) + sizeof(bits_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.Work)
}

void Work::SharedCtor() {
  merkle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bits_) -
      reinterpret_cast<char*>(&height_)) + sizeof(bits_));
}

Work::~Work() {
  // @@protoc_insertion_point(destructor:pool.proto.Work)
  SharedDtor();
}

void Work::SharedDtor() {
  merkle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Work::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Work::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Work& Work::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Work.base);
  return *internal_default_instance();
}


void Work::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Work)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    merkle_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bits_) -
        reinterpret_cast<char*>(&height_)) + sizeof(bits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Work::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Work)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string merkle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->merkle().data(), static_cast<int>(this->merkle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Work.merkle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 bits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Work)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Work)
  return false;
#undef DO_
}

void Work::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Work)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 height = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // required string merkle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), static_cast<int>(this->merkle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Work.merkle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->merkle(), output);
  }

  // required uint32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 bits = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Work)
}

::google::protobuf::uint8* Work::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Work)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 height = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // required string merkle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merkle().data(), static_cast<int>(this->merkle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Work.merkle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->merkle(), target);
  }

  // required uint32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 bits = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Work)
  return target;
}

size_t Work::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Work)
  size_t total_size = 0;

  if (has_merkle()) {
    // required string merkle = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());
  }

  if (has_height()) {
    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  if (has_time()) {
    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  if (has_bits()) {
    // required uint32 bits = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());
  }

  return total_size;
}
size_t Work::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Work)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string merkle = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle());

    // required uint32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

    // required uint32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());

    // required uint32 bits = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Work::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Work)
  GOOGLE_DCHECK_NE(&from, this);
  const Work* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Work>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Work)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Work)
    MergeFrom(*source);
  }
}

void Work::MergeFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Work)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_merkle();
      merkle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_);
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      bits_ = from.bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Work::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Work::CopyFrom(const Work& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Work)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Work::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Work::Swap(Work* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Work::InternalSwap(Work* other) {
  using std::swap;
  merkle_.Swap(&other->merkle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(time_, other->time_);
  swap(bits_, other->bits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Work::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
  ::pool::proto::_Reply_default_instance_._instance.get_mutable()->sinfo_ = const_cast< ::pool::proto::ServerInfo*>(
      ::pool::proto::ServerInfo::internal_default_instance());
  ::pool::proto::_Reply_default_instance_._instance.get_mutable()->work_ = const_cast< ::pool::proto::Work*>(
      ::pool::proto::Work::internal_default_instance());
  ::pool::proto::_Reply_default_instance_._instance.get_mutable()->block_ = const_cast< ::pool::proto::Block*>(
      ::pool::proto::Block::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kTypeFieldNumber;
const int Reply::kReqidFieldNumber;
const int Reply::kErrorFieldNumber;
const int Reply::kErrstrFieldNumber;
const int Reply::kSinfoFieldNumber;
const int Reply::kWorkFieldNumber;
const int Reply::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Reply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Reply)
}
Reply::Reply(const Reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errstr()) {
    errstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errstr_);
  }
  if (from.has_sinfo()) {
    sinfo_ = new ::pool::proto::ServerInfo(*from.sinfo_);
  } else {
    sinfo_ = NULL;
  }
  if (from.has_work()) {
    work_ = new ::pool::proto::Work(*from.work_);
  } else {
    work_ = NULL;
  }
  if (from.has_block()) {
    block_ = new ::pool::proto::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&type_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.Reply)
}

void Reply::SharedCtor() {
  errstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&sinfo_)) + sizeof(error_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:pool.proto.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  errstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sinfo_;
  if (this != internal_default_instance()) delete work_;
  if (this != internal_default_instance()) delete block_;
}

void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reply& Reply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Reply.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      errstr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sinfo_ != NULL);
      sinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(work_ != NULL);
      work_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(block_ != NULL);
      block_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&type_)) + sizeof(error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Reply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_reqid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pool.proto.Reply.ErrType error = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Reply_ErrType_IsValid(value)) {
            set_error(static_cast< ::pool::proto::Reply_ErrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errstr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errstr().data(), static_cast<int>(this->errstr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.Reply.errstr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.ServerInfo sinfo = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.Work work = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.Block block = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Request.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 reqid = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // required .pool.proto.Reply.ErrType error = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->error(), output);
  }

  // optional string errstr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), static_cast<int>(this->errstr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Reply.errstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->errstr(), output);
  }

  // optional .pool.proto.ServerInfo sinfo = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_sinfo(), output);
  }

  // optional .pool.proto.Work work = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_work(), output);
  }

  // optional .pool.proto.Block block = 22;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Reply)
}

::google::protobuf::uint8* Reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Request.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 reqid = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // required .pool.proto.Reply.ErrType error = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->error(), target);
  }

  // optional string errstr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errstr().data(), static_cast<int>(this->errstr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.Reply.errstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->errstr(), target);
  }

  // optional .pool.proto.ServerInfo sinfo = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_sinfo(), deterministic, target);
  }

  // optional .pool.proto.Work work = 21;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_work(), deterministic, target);
  }

  // optional .pool.proto.Block block = 22;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_block(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Reply)
  return target;
}

size_t Reply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.Reply)
  size_t total_size = 0;

  if (has_type()) {
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_reqid()) {
    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());
  }

  if (has_error()) {
    // required .pool.proto.Reply.ErrType error = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  return total_size;
}
size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Reply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000070) ^ 0x00000070) == 0) {  // All required fields are present.
    // required .pool.proto.Request.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 reqid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reqid());

    // required .pool.proto.Reply.ErrType error = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string errstr = 11;
    if (has_errstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errstr());
    }

    // optional .pool.proto.ServerInfo sinfo = 20;
    if (has_sinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sinfo_);
    }

    // optional .pool.proto.Work work = 21;
    if (has_work()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *work_);
    }

    // optional .pool.proto.Block block = 22;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *block_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errstr();
      errstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errstr_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sinfo()->::pool::proto::ServerInfo::MergeFrom(from.sinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_work()->::pool::proto::Work::MergeFrom(from.work());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_block()->::pool::proto::Block::MergeFrom(from.block());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      reqid_ = from.reqid_;
    }
    if (cached_has_bits & 0x00000040u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000070) != 0x00000070) return false;
  if (has_sinfo()) {
    if (!this->sinfo_->IsInitialized()) return false;
  }
  if (has_work()) {
    if (!this->work_->IsInitialized()) return false;
  }
  if (has_block()) {
    if (!this->block_->IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  using std::swap;
  errstr_.Swap(&other->errstr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sinfo_, other->sinfo_);
  swap(work_, other->work_);
  swap(block_, other->block_);
  swap(type_, other->type_);
  swap(reqid_, other->reqid_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqStats::kReqtypeFieldNumber;
const int ReqStats::kErrtypeFieldNumber;
const int ReqStats::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqStats::ReqStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_ReqStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ReqStats)
}
ReqStats::ReqStats(const ReqStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reqtype_, &from.reqtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&reqtype_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.ReqStats)
}

void ReqStats::SharedCtor() {
  ::memset(&reqtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&reqtype_)) + sizeof(count_));
}

ReqStats::~ReqStats() {
  // @@protoc_insertion_point(destructor:pool.proto.ReqStats)
  SharedDtor();
}

void ReqStats::SharedDtor() {
}

void ReqStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqStats::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqStats& ReqStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_ReqStats.base);
  return *internal_default_instance();
}


void ReqStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ReqStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&reqtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&reqtype_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ReqStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type reqtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_reqtype(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .pool.proto.Reply.ErrType errtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Reply_ErrType_IsValid(value)) {
            set_errtype(static_cast< ::pool::proto::Reply_ErrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ReqStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ReqStats)
  return false;
#undef DO_
}

void ReqStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ReqStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Request.Type reqtype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reqtype(), output);
  }

  // required .pool.proto.Reply.ErrType errtype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errtype(), output);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ReqStats)
}

::google::protobuf::uint8* ReqStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ReqStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pool.proto.Request.Type reqtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reqtype(), target);
  }

  // required .pool.proto.Reply.ErrType errtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errtype(), target);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ReqStats)
  return target;
}

size_t ReqStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ReqStats)
  size_t total_size = 0;

  if (has_reqtype()) {
    // required .pool.proto.Request.Type reqtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reqtype());
  }

  if (has_errtype()) {
    // required .pool.proto.Reply.ErrType errtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errtype());
  }

  if (has_count()) {
    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t ReqStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ReqStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pool.proto.Request.Type reqtype = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reqtype());

    // required .pool.proto.Reply.ErrType errtype = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errtype());

    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ReqStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ReqStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ReqStats)
    MergeFrom(*source);
  }
}

void ReqStats::MergeFrom(const ReqStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ReqStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      reqtype_ = from.reqtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      errtype_ = from.errtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ReqStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStats::CopyFrom(const ReqStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ReqStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ReqStats::Swap(ReqStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqStats::InternalSwap(ReqStats* other) {
  using std::swap;
  swap(reqtype_, other->reqtype_);
  swap(errtype_, other->errtype_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqStats::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerStats::kNameFieldNumber;
const int ServerStats::kThreadFieldNumber;
const int ServerStats::kWorkersFieldNumber;
const int ServerStats::kLatencyFieldNumber;
const int ServerStats::kCpdFieldNumber;
const int ServerStats::kReqstatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerStats::ServerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_ServerStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.ServerStats)
}
ServerStats::ServerStats(const ServerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      reqstats_(from.reqstats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&thread_, &from.thread_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpd_) -
    reinterpret_cast<char*>(&thread_)) + sizeof(cpd_));
  // @@protoc_insertion_point(copy_constructor:pool.proto.ServerStats)
}

void ServerStats::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thread_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpd_) -
      reinterpret_cast<char*>(&thread_)) + sizeof(cpd_));
}

ServerStats::~ServerStats() {
  // @@protoc_insertion_point(destructor:pool.proto.ServerStats)
  SharedDtor();
}

void ServerStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerStats::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerStats& ServerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_ServerStats.base);
  return *internal_default_instance();
}


void ServerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.ServerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reqstats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&thread_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpd_) -
        reinterpret_cast<char*>(&thread_)) + sizeof(cpd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.ServerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pool.proto.ServerStats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 thread = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_thread();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 workers = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_workers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 latency = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float cpd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_cpd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pool.proto.ReqStats reqstats = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reqstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.ServerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.ServerStats)
  return false;
#undef DO_
}

void ServerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.ServerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 thread = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread(), output);
  }

  // required uint32 workers = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->workers(), output);
  }

  // required uint32 latency = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->latency(), output);
  }

  // required float cpd = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cpd(), output);
  }

  // repeated .pool.proto.ReqStats reqstats = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reqstats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->reqstats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.ServerStats)
}

::google::protobuf::uint8* ServerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.ServerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pool.proto.ServerStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 thread = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread(), target);
  }

  // required uint32 workers = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->workers(), target);
  }

  // required uint32 latency = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->latency(), target);
  }

  // required float cpd = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cpd(), target);
  }

  // repeated .pool.proto.ReqStats reqstats = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reqstats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->reqstats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.ServerStats)
  return target;
}

size_t ServerStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pool.proto.ServerStats)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_thread()) {
    // required uint32 thread = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread());
  }

  if (has_workers()) {
    // required uint32 workers = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->workers());
  }

  if (has_latency()) {
    // required uint32 latency = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  if (has_cpd()) {
    // required float cpd = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ServerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.ServerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 thread = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread());

    // required uint32 workers = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->workers());

    // required uint32 latency = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());

    // required float cpd = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .pool.proto.ReqStats reqstats = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->reqstats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reqstats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.ServerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.ServerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.ServerStats)
    MergeFrom(*source);
  }
}

void ServerStats::MergeFrom(const ServerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.ServerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reqstats_.MergeFrom(from.reqstats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      thread_ = from.thread_;
    }
    if (cached_has_bits & 0x00000004u) {
      workers_ = from.workers_;
    }
    if (cached_has_bits & 0x00000008u) {
      latency_ = from.latency_;
    }
    if (cached_has_bits & 0x00000010u) {
      cpd_ = from.cpd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.ServerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats::CopyFrom(const ServerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.ServerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reqstats())) return false;
  return true;
}

void ServerStats::Swap(ServerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStats::InternalSwap(ServerStats* other) {
  using std::swap;
  CastToBase(&reqstats_)->InternalSwap(CastToBase(&other->reqstats_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thread_, other->thread_);
  swap(workers_, other->workers_);
  swap(latency_, other->latency_);
  swap(cpd_, other->cpd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerStats::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Data::InitAsDefaultInstance() {
  ::pool::proto::_Data_default_instance_._instance.get_mutable()->share_ = const_cast< ::pool::proto::Share*>(
      ::pool::proto::Share::internal_default_instance());
  ::pool::proto::_Data_default_instance_._instance.get_mutable()->clientstats_ = const_cast< ::pool::proto::ClientStats*>(
      ::pool::proto::ClientStats::internal_default_instance());
  ::pool::proto::_Data_default_instance_._instance.get_mutable()->serverstats_ = const_cast< ::pool::proto::ServerStats*>(
      ::pool::proto::ServerStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kShareFieldNumber;
const int Data::kClientstatsFieldNumber;
const int Data::kServerstatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Data.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pool.proto.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_share()) {
    share_ = new ::pool::proto::Share(*from.share_);
  } else {
    share_ = NULL;
  }
  if (from.has_clientstats()) {
    clientstats_ = new ::pool::proto::ClientStats(*from.clientstats_);
  } else {
    clientstats_ = NULL;
  }
  if (from.has_serverstats()) {
    serverstats_ = new ::pool::proto::ServerStats(*from.serverstats_);
  } else {
    serverstats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pool.proto.Data)
}

void Data::SharedCtor() {
  ::memset(&share_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverstats_) -
      reinterpret_cast<char*>(&share_)) + sizeof(serverstats_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:pool.proto.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != internal_default_instance()) delete share_;
  if (this != internal_default_instance()) delete clientstats_;
  if (this != internal_default_instance()) delete serverstats_;
}

void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Data& Data::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Data.base);
  return *internal_default_instance();
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:pool.proto.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(share_ != NULL);
      share_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clientstats_ != NULL);
      clientstats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(serverstats_ != NULL);
      serverstats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pool.proto.Data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pool.proto.Share share = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_share()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.ClientStats clientstats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clientstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pool.proto.ServerStats serverstats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serverstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pool.proto.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pool.proto.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pool.proto.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pool.proto.Share share = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_share(), output);
  }

  // optional .pool.proto.ClientStats clientstats = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_clientstats(), output);
  }

  // optional .pool.proto.ServerStats serverstats = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_serverstats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pool.proto.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pool.proto.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pool.proto.Share share = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_share(), deterministic, target);
  }

  // optional .pool.proto.ClientStats clientstats = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_clientstats(), deterministic, target);
  }

  // optional .pool.proto.ServerStats serverstats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_serverstats(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pool.proto.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pool.proto.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .pool.proto.Share share = 1;
    if (has_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *share_);
    }

    // optional .pool.proto.ClientStats clientstats = 2;
    if (has_clientstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *clientstats_);
    }

    // optional .pool.proto.ServerStats serverstats = 3;
    if (has_serverstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serverstats_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pool.proto.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pool.proto.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pool.proto.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pool.proto.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_share()->::pool::proto::Share::MergeFrom(from.share());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clientstats()->::pool::proto::ClientStats::MergeFrom(from.clientstats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_serverstats()->::pool::proto::ServerStats::MergeFrom(from.serverstats());
    }
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pool.proto.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pool.proto.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if (has_share()) {
    if (!this->share_->IsInitialized()) return false;
  }
  if (has_clientstats()) {
    if (!this->clientstats_->IsInitialized()) return false;
  }
  if (has_serverstats()) {
    if (!this->serverstats_->IsInitialized()) return false;
  }
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  using std::swap;
  swap(share_, other->share_);
  swap(clientstats_, other->clientstats_);
  swap(serverstats_, other->serverstats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace pool
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::Block* Arena::CreateMaybeMessage< ::pool::proto::Block >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::Block >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::Signal* Arena::CreateMaybeMessage< ::pool::proto::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::Signal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::ClientStats* Arena::CreateMaybeMessage< ::pool::proto::ClientStats >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::ClientStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::Share* Arena::CreateMaybeMessage< ::pool::proto::Share >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::Share >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::Request* Arena::CreateMaybeMessage< ::pool::proto::Request >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::ServerInfo* Arena::CreateMaybeMessage< ::pool::proto::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::ServerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::Work* Arena::CreateMaybeMessage< ::pool::proto::Work >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::Work >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::Reply* Arena::CreateMaybeMessage< ::pool::proto::Reply >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::Reply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::ReqStats* Arena::CreateMaybeMessage< ::pool::proto::ReqStats >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::ReqStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::ServerStats* Arena::CreateMaybeMessage< ::pool::proto::ServerStats >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::ServerStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pool::proto::Data* Arena::CreateMaybeMessage< ::pool::proto::Data >(Arena* arena) {
  return Arena::CreateInternal< ::pool::proto::Data >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
