// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pool {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Share_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Share_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Work_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Work_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_ErrType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  Block_descriptor_ = file->message_type(0);
  static const int Block_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, prevhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, reqdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, minshare_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  Signal_descriptor_ = file->message_type(1);
  static const int Signal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, block_),
  };
  Signal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signal));
  Signal_Type_descriptor_ = Signal_descriptor_->enum_type(0);
  ClientStats_descriptor_ = file->message_type(2);
  static const int ClientStats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, cpd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, ngpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, height_),
  };
  ClientStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientStats_descriptor_,
      ClientStats::default_instance_,
      ClientStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientStats));
  Share_descriptor_ = file->message_type(3);
  static const int Share_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, gpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, merkle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, multi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, blockhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, chaintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, isblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, genvalue_),
  };
  Share_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Share_descriptor_,
      Share::default_instance_,
      Share_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Share, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Share));
  Request_descriptor_ = file->message_type(4);
  static const int Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, reqnonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, stats_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_Type_descriptor_ = Request_descriptor_->enum_type(0);
  ServerInfo_descriptor_ = file->message_type(5);
  static const int ServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, router_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, pub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, target_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  Work_descriptor_ = file->message_type(6);
  static const int Work_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, merkle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, bits_),
  };
  Work_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Work_descriptor_,
      Work::default_instance_,
      Work_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Work, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Work));
  Reply_descriptor_ = file->message_type(7);
  static const int Reply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, errstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, sinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, work_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, block_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  Reply_ErrType_descriptor_ = Reply_descriptor_->enum_type(0);
  ReqStats_descriptor_ = file->message_type(8);
  static const int ReqStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, errtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, count_),
  };
  ReqStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqStats_descriptor_,
      ReqStats::default_instance_,
      ReqStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqStats));
  ServerStats_descriptor_ = file->message_type(9);
  static const int ServerStats_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, cpd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, reqstats_),
  };
  ServerStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStats_descriptor_,
      ServerStats::default_instance_,
      ServerStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStats));
  Data_descriptor_ = file->message_type(10);
  static const int Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, clientstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, serverstats_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signal_descriptor_, &Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientStats_descriptor_, &ClientStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Share_descriptor_, &Share::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Work_descriptor_, &Work::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqStats_descriptor_, &ReqStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStats_descriptor_, &ServerStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete Block::default_instance_;
  delete Block_reflection_;
  delete Signal::default_instance_;
  delete Signal_reflection_;
  delete ClientStats::default_instance_;
  delete ClientStats_reflection_;
  delete Share::default_instance_;
  delete Share_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete Work::default_instance_;
  delete Work_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
  delete ReqStats::default_instance_;
  delete ReqStats_reflection_;
  delete ServerStats::default_instance_;
  delete ServerStats_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\npool.proto\"Z\n\005Block\022\016\n"
    "\006height\030\001 \002(\r\022\014\n\004hash\030\002 \002(\t\022\020\n\010prevhash\030"
    "\003 \002(\t\022\017\n\007reqdiff\030\004 \002(\r\022\020\n\010minshare\030\005 \002(\r"
    "\"u\n\006Signal\022%\n\004type\030\001 \002(\0162\027.pool.proto.Si"
    "gnal.Type\022 \n\005block\030\002 \001(\0132\021.pool.proto.Bl"
    "ock\"\"\n\004Type\022\014\n\010NEWBLOCK\020\001\022\014\n\010SHUTDOWN\020\002\""
    "\273\001\n\013ClientStats\022\014\n\004addr\030\001 \002(\t\022\014\n\004name\030\002 "
    "\002(\t\022\020\n\010clientid\030\003 \002(\006\022\022\n\ninstanceid\030\004 \002("
    "\006\022\017\n\007version\030\n \002(\r\022\013\n\003cpd\030\013 \002(\002\022\017\n\007laten"
    "cy\030\014 \002(\r\022\014\n\004temp\030\r \002(\r\022\016\n\006errors\030\016 \002(\r\022\r"
    "\n\005ngpus\030\017 \002(\r\022\016\n\006height\030\020 \002(\r\"\205\002\n\005Share\022"
    "\014\n\004addr\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010clientid\030"
    "\003 \002(\006\022\r\n\005gpuid\030\004 \001(\r\022\014\n\004hash\030\n \002(\t\022\016\n\006me"
    "rkle\030\013 \002(\t\022\014\n\004time\030\014 \002(\r\022\014\n\004bits\030\r \002(\r\022\r"
    "\n\005nonce\030\016 \002(\r\022\r\n\005multi\030\017 \002(\t\022\021\n\tblockhas"
    "h\030\020 \001(\t\022\016\n\006height\030\024 \002(\r\022\016\n\006length\030\025 \002(\r\022"
    "\021\n\tchaintype\030\026 \002(\r\022\017\n\007isblock\030\027 \002(\010\022\020\n\010g"
    "envalue\030\030 \001(\004\"\211\002\n\007Request\022&\n\004type\030\001 \002(\0162"
    "\030.pool.proto.Request.Type\022\r\n\005reqid\030\002 \002(\r"
    "\022\017\n\007version\030\n \001(\r\022\016\n\006height\030\013 \001(\r\022\020\n\010req"
    "nonce\030\014 \001(\014\022 \n\005share\030\024 \001(\0132\021.pool.proto."
    "Share\022&\n\005stats\030\025 \001(\0132\027.pool.proto.Client"
    "Stats\"J\n\004Type\022\010\n\004NONE\020\000\022\013\n\007CONNECT\020\001\022\013\n\007"
    "GETWORK\020\002\022\t\n\005SHARE\020\003\022\t\n\005STATS\020\004\022\010\n\004PING\020"
    "\005\"G\n\nServerInfo\022\014\n\004host\030\001 \002(\t\022\016\n\006router\030"
    "\002 \002(\r\022\013\n\003pub\030\003 \002(\r\022\016\n\006target\030\004 \002(\r\"B\n\004Wo"
    "rk\022\016\n\006height\030\001 \002(\r\022\016\n\006merkle\030\002 \002(\t\022\014\n\004ti"
    "me\030\003 \002(\r\022\014\n\004bits\030\004 \002(\r\"\304\002\n\005Reply\022&\n\004type"
    "\030\001 \002(\0162\030.pool.proto.Request.Type\022\r\n\005reqi"
    "d\030\002 \002(\r\022(\n\005error\030\n \002(\0162\031.pool.proto.Repl"
    "y.ErrType\022\016\n\006errstr\030\013 \001(\t\022%\n\005sinfo\030\024 \001(\013"
    "2\026.pool.proto.ServerInfo\022\036\n\004work\030\025 \001(\0132\020"
    ".pool.proto.Work\022 \n\005block\030\026 \001(\0132\021.pool.p"
    "roto.Block\"a\n\007ErrType\022\010\n\004NONE\020\000\022\013\n\007VERSI"
    "ON\020\001\022\n\n\006HEIGHT\020\002\022\014\n\010REQNONCE\020\003\022\t\n\005STALE\020"
    "\004\022\013\n\007INVALID\020\005\022\r\n\tDUPLICATE\020\006\"p\n\010ReqStat"
    "s\022)\n\007reqtype\030\001 \002(\0162\030.pool.proto.Request."
    "Type\022*\n\007errtype\030\002 \002(\0162\031.pool.proto.Reply"
    ".ErrType\022\r\n\005count\030\003 \002(\r\"\202\001\n\013ServerStats\022"
    "\014\n\004name\030\001 \002(\t\022\016\n\006thread\030\002 \002(\r\022\017\n\007workers"
    "\030\n \002(\r\022\017\n\007latency\030\013 \002(\r\022\013\n\003cpd\030\014 \002(\002\022&\n\010"
    "reqstats\030\024 \003(\0132\024.pool.proto.ReqStats\"\204\001\n"
    "\004Data\022 \n\005share\030\001 \001(\0132\021.pool.proto.Share\022"
    ",\n\013clientstats\030\002 \001(\0132\027.pool.proto.Client"
    "Stats\022,\n\013serverstats\030\003 \001(\0132\027.pool.proto."
    "ServerStats", 1811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  Block::default_instance_ = new Block();
  Signal::default_instance_ = new Signal();
  ClientStats::default_instance_ = new ClientStats();
  Share::default_instance_ = new Share();
  Request::default_instance_ = new Request();
  ServerInfo::default_instance_ = new ServerInfo();
  Work::default_instance_ = new Work();
  Reply::default_instance_ = new Reply();
  ReqStats::default_instance_ = new ReqStats();
  ServerStats::default_instance_ = new ServerStats();
  Data::default_instance_ = new Data();
  Block::default_instance_->InitAsDefaultInstance();
  Signal::default_instance_->InitAsDefaultInstance();
  ClientStats::default_instance_->InitAsDefaultInstance();
  Share::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  Work::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  ReqStats::default_instance_->InitAsDefaultInstance();
  ServerStats::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Block::kHeightFieldNumber;
const int Block::kHashFieldNumber;
const int Block::kPrevhashFieldNumber;
const int Block::kReqdiffFieldNumber;
const int Block::kMinshareFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0u;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prevhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reqdiff_ = 0u;
  minshare_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (prevhash_ != &::google::protobuf::internal::kEmptyString) {
    delete prevhash_;
  }
  if (this != default_instance_) {
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0u;
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    if (has_prevhash()) {
      if (prevhash_ != &::google::protobuf::internal::kEmptyString) {
        prevhash_->clear();
      }
    }
    reqdiff_ = 0u;
    minshare_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // required string hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prevhash;
        break;
      }

      // required string prevhash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prevhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prevhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prevhash().data(), this->prevhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reqdiff;
        break;
      }

      // required uint32 reqdiff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqdiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqdiff_)));
          set_has_reqdiff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minshare;
        break;
      }

      // required uint32 minshare = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minshare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minshare_)));
          set_has_minshare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hash(), output);
  }

  // required string prevhash = 3;
  if (has_prevhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prevhash().data(), this->prevhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->prevhash(), output);
  }

  // required uint32 reqdiff = 4;
  if (has_reqdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqdiff(), output);
  }

  // required uint32 minshare = 5;
  if (has_minshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minshare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // required string prevhash = 3;
  if (has_prevhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prevhash().data(), this->prevhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prevhash(), target);
  }

  // required uint32 reqdiff = 4;
  if (has_reqdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqdiff(), target);
  }

  // required uint32 minshare = 5;
  if (has_minshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minshare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required string hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // required string prevhash = 3;
    if (has_prevhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prevhash());
    }

    // required uint32 reqdiff = 4;
    if (has_reqdiff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqdiff());
    }

    // required uint32 minshare = 5;
    if (has_minshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minshare());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_prevhash()) {
      set_prevhash(from.prevhash());
    }
    if (from.has_reqdiff()) {
      set_reqdiff(from.reqdiff());
    }
    if (from.has_minshare()) {
      set_minshare(from.minshare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(hash_, other->hash_);
    std::swap(prevhash_, other->prevhash_);
    std::swap(reqdiff_, other->reqdiff_);
    std::swap(minshare_, other->minshare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_Type_descriptor_;
}
bool Signal_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Signal_Type Signal::NEWBLOCK;
const Signal_Type Signal::SHUTDOWN;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Signal::kTypeFieldNumber;
const int Signal::kBlockFieldNumber;
#endif  // !_MSC_VER

Signal::Signal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Signal::InitAsDefaultInstance() {
  block_ = const_cast< ::pool::proto::Block*>(&::pool::proto::Block::default_instance());
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signal::~Signal() {
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New() const {
  return new Signal;
}

void Signal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_block()) {
      if (block_ != NULL) block_->::pool::proto::Block::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Signal.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Signal_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Signal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block;
        break;
      }

      // optional .pool.proto.Block block = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pool.proto.Signal.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pool.proto.Block block = 2;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pool.proto.Signal.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pool.proto.Block block = 2;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Signal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pool.proto.Signal.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pool.proto.Block block = 2;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_block()) {
      mutable_block()->::pool::proto::Block::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void Signal::Swap(Signal* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientStats::kAddrFieldNumber;
const int ClientStats::kNameFieldNumber;
const int ClientStats::kClientidFieldNumber;
const int ClientStats::kInstanceidFieldNumber;
const int ClientStats::kVersionFieldNumber;
const int ClientStats::kCpdFieldNumber;
const int ClientStats::kLatencyFieldNumber;
const int ClientStats::kTempFieldNumber;
const int ClientStats::kErrorsFieldNumber;
const int ClientStats::kNgpusFieldNumber;
const int ClientStats::kHeightFieldNumber;
#endif  // !_MSC_VER

ClientStats::ClientStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientStats::InitAsDefaultInstance() {
}

ClientStats::ClientStats(const ClientStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientStats::SharedCtor() {
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = GOOGLE_ULONGLONG(0);
  instanceid_ = GOOGLE_ULONGLONG(0);
  version_ = 0u;
  cpd_ = 0;
  latency_ = 0u;
  temp_ = 0u;
  errors_ = 0u;
  ngpus_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientStats::~ClientStats() {
  SharedDtor();
}

void ClientStats::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStats_descriptor_;
}

const ClientStats& ClientStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ClientStats* ClientStats::default_instance_ = NULL;

ClientStats* ClientStats::New() const {
  return new ClientStats;
}

void ClientStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    clientid_ = GOOGLE_ULONGLONG(0);
    instanceid_ = GOOGLE_ULONGLONG(0);
    version_ = 0u;
    cpd_ = 0;
    latency_ = 0u;
    temp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    errors_ = 0u;
    ngpus_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clientid;
        break;
      }

      // required fixed64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_instanceid;
        break;
      }

      // required fixed64 instanceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_instanceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_version;
        break;
      }

      // required uint32 version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_cpd;
        break;
      }

      // required float cpd = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpd_)));
          set_has_cpd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_latency;
        break;
      }

      // required uint32 latency = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
          set_has_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_temp;
        break;
      }

      // required uint32 temp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errors;
        break;
      }

      // required uint32 errors = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
          set_has_errors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ngpus;
        break;
      }

      // required uint32 ngpus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ngpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngpus_)));
          set_has_ngpus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_height;
        break;
      }

      // required uint32 height = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->addr(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clientid(), output);
  }

  // required fixed64 instanceid = 4;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->instanceid(), output);
  }

  // required uint32 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version(), output);
  }

  // required float cpd = 11;
  if (has_cpd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cpd(), output);
  }

  // required uint32 latency = 12;
  if (has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->latency(), output);
  }

  // required uint32 temp = 13;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->temp(), output);
  }

  // required uint32 errors = 14;
  if (has_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->errors(), output);
  }

  // required uint32 ngpus = 15;
  if (has_ngpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ngpus(), output);
  }

  // required uint32 height = 16;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clientid(), target);
  }

  // required fixed64 instanceid = 4;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->instanceid(), target);
  }

  // required uint32 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version(), target);
  }

  // required float cpd = 11;
  if (has_cpd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cpd(), target);
  }

  // required uint32 latency = 12;
  if (has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->latency(), target);
  }

  // required uint32 temp = 13;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->temp(), target);
  }

  // required uint32 errors = 14;
  if (has_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->errors(), target);
  }

  // required uint32 ngpus = 15;
  if (has_ngpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ngpus(), target);
  }

  // required uint32 height = 16;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required fixed64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 + 8;
    }

    // required fixed64 instanceid = 4;
    if (has_instanceid()) {
      total_size += 1 + 8;
    }

    // required uint32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required float cpd = 11;
    if (has_cpd()) {
      total_size += 1 + 4;
    }

    // required uint32 latency = 12;
    if (has_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latency());
    }

    // required uint32 temp = 13;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 errors = 14;
    if (has_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errors());
    }

    // required uint32 ngpus = 15;
    if (has_ngpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ngpus());
    }

    // required uint32 height = 16;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientStats::MergeFrom(const ClientStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_cpd()) {
      set_cpd(from.cpd());
    }
    if (from.has_latency()) {
      set_latency(from.latency());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_errors()) {
      set_errors(from.errors());
    }
    if (from.has_ngpus()) {
      set_ngpus(from.ngpus());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStats::CopyFrom(const ClientStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void ClientStats::Swap(ClientStats* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(name_, other->name_);
    std::swap(clientid_, other->clientid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(version_, other->version_);
    std::swap(cpd_, other->cpd_);
    std::swap(latency_, other->latency_);
    std::swap(temp_, other->temp_);
    std::swap(errors_, other->errors_);
    std::swap(ngpus_, other->ngpus_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStats_descriptor_;
  metadata.reflection = ClientStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Share::kAddrFieldNumber;
const int Share::kNameFieldNumber;
const int Share::kClientidFieldNumber;
const int Share::kGpuidFieldNumber;
const int Share::kHashFieldNumber;
const int Share::kMerkleFieldNumber;
const int Share::kTimeFieldNumber;
const int Share::kBitsFieldNumber;
const int Share::kNonceFieldNumber;
const int Share::kMultiFieldNumber;
const int Share::kBlockhashFieldNumber;
const int Share::kHeightFieldNumber;
const int Share::kLengthFieldNumber;
const int Share::kChaintypeFieldNumber;
const int Share::kIsblockFieldNumber;
const int Share::kGenvalueFieldNumber;
#endif  // !_MSC_VER

Share::Share()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Share::InitAsDefaultInstance() {
}

Share::Share(const Share& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Share::SharedCtor() {
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = GOOGLE_ULONGLONG(0);
  gpuid_ = 0u;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  merkle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  bits_ = 0u;
  nonce_ = 0u;
  multi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blockhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  height_ = 0u;
  length_ = 0u;
  chaintype_ = 0u;
  isblock_ = false;
  genvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Share::~Share() {
  SharedDtor();
}

void Share::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (merkle_ != &::google::protobuf::internal::kEmptyString) {
    delete merkle_;
  }
  if (multi_ != &::google::protobuf::internal::kEmptyString) {
    delete multi_;
  }
  if (blockhash_ != &::google::protobuf::internal::kEmptyString) {
    delete blockhash_;
  }
  if (this != default_instance_) {
  }
}

void Share::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Share::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Share_descriptor_;
}

const Share& Share::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Share* Share::default_instance_ = NULL;

Share* Share::New() const {
  return new Share;
}

void Share::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    clientid_ = GOOGLE_ULONGLONG(0);
    gpuid_ = 0u;
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    if (has_merkle()) {
      if (merkle_ != &::google::protobuf::internal::kEmptyString) {
        merkle_->clear();
      }
    }
    time_ = 0u;
    bits_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nonce_ = 0u;
    if (has_multi()) {
      if (multi_ != &::google::protobuf::internal::kEmptyString) {
        multi_->clear();
      }
    }
    if (has_blockhash()) {
      if (blockhash_ != &::google::protobuf::internal::kEmptyString) {
        blockhash_->clear();
      }
    }
    height_ = 0u;
    length_ = 0u;
    chaintype_ = 0u;
    isblock_ = false;
    genvalue_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Share::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clientid;
        break;
      }

      // required fixed64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gpuid;
        break;
      }

      // optional uint32 gpuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpuid_)));
          set_has_gpuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hash;
        break;
      }

      // required string hash = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_merkle;
        break;
      }

      // required string merkle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merkle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->merkle().data(), this->merkle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_time;
        break;
      }

      // required uint32 time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bits;
        break;
      }

      // required uint32 bits = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nonce;
        break;
      }

      // required uint32 nonce = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_multi;
        break;
      }

      // required string multi = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multi().data(), this->multi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_blockhash;
        break;
      }

      // optional string blockhash = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blockhash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blockhash().data(), this->blockhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_height;
        break;
      }

      // required uint32 height = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_length;
        break;
      }

      // required uint32 length = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_chaintype;
        break;
      }

      // required uint32 chaintype = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chaintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chaintype_)));
          set_has_chaintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_isblock;
        break;
      }

      // required bool isblock = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isblock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblock_)));
          set_has_isblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_genvalue;
        break;
      }

      // optional uint64 genvalue = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &genvalue_)));
          set_has_genvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Share::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->addr(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clientid(), output);
  }

  // optional uint32 gpuid = 4;
  if (has_gpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gpuid(), output);
  }

  // required string hash = 10;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->hash(), output);
  }

  // required string merkle = 11;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->merkle(), output);
  }

  // required uint32 time = 12;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time(), output);
  }

  // required uint32 bits = 13;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->bits(), output);
  }

  // required uint32 nonce = 14;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->nonce(), output);
  }

  // required string multi = 15;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multi().data(), this->multi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->multi(), output);
  }

  // optional string blockhash = 16;
  if (has_blockhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blockhash().data(), this->blockhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->blockhash(), output);
  }

  // required uint32 height = 20;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->height(), output);
  }

  // required uint32 length = 21;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->length(), output);
  }

  // required uint32 chaintype = 22;
  if (has_chaintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->chaintype(), output);
  }

  // required bool isblock = 23;
  if (has_isblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isblock(), output);
  }

  // optional uint64 genvalue = 24;
  if (has_genvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->genvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Share::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required fixed64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clientid(), target);
  }

  // optional uint32 gpuid = 4;
  if (has_gpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gpuid(), target);
  }

  // required string hash = 10;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hash(), target);
  }

  // required string merkle = 11;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->merkle(), target);
  }

  // required uint32 time = 12;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time(), target);
  }

  // required uint32 bits = 13;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->bits(), target);
  }

  // required uint32 nonce = 14;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->nonce(), target);
  }

  // required string multi = 15;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multi().data(), this->multi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->multi(), target);
  }

  // optional string blockhash = 16;
  if (has_blockhash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blockhash().data(), this->blockhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->blockhash(), target);
  }

  // required uint32 height = 20;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->height(), target);
  }

  // required uint32 length = 21;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->length(), target);
  }

  // required uint32 chaintype = 22;
  if (has_chaintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->chaintype(), target);
  }

  // required bool isblock = 23;
  if (has_isblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isblock(), target);
  }

  // optional uint64 genvalue = 24;
  if (has_genvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->genvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Share::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required fixed64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 + 8;
    }

    // optional uint32 gpuid = 4;
    if (has_gpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpuid());
    }

    // required string hash = 10;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // required string merkle = 11;
    if (has_merkle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merkle());
    }

    // required uint32 time = 12;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 bits = 13;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 nonce = 14;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce());
    }

    // required string multi = 15;
    if (has_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multi());
    }

    // optional string blockhash = 16;
    if (has_blockhash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blockhash());
    }

    // required uint32 height = 20;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required uint32 length = 21;
    if (has_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // required uint32 chaintype = 22;
    if (has_chaintype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chaintype());
    }

    // required bool isblock = 23;
    if (has_isblock()) {
      total_size += 2 + 1;
    }

    // optional uint64 genvalue = 24;
    if (has_genvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->genvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Share::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Share* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Share*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Share::MergeFrom(const Share& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gpuid()) {
      set_gpuid(from.gpuid());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_merkle()) {
      set_merkle(from.merkle());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_multi()) {
      set_multi(from.multi());
    }
    if (from.has_blockhash()) {
      set_blockhash(from.blockhash());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_chaintype()) {
      set_chaintype(from.chaintype());
    }
    if (from.has_isblock()) {
      set_isblock(from.isblock());
    }
    if (from.has_genvalue()) {
      set_genvalue(from.genvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Share::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Share::CopyFrom(const Share& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Share::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007bf7) != 0x00007bf7) return false;

  return true;
}

void Share::Swap(Share* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(name_, other->name_);
    std::swap(clientid_, other->clientid_);
    std::swap(gpuid_, other->gpuid_);
    std::swap(hash_, other->hash_);
    std::swap(merkle_, other->merkle_);
    std::swap(time_, other->time_);
    std::swap(bits_, other->bits_);
    std::swap(nonce_, other->nonce_);
    std::swap(multi_, other->multi_);
    std::swap(blockhash_, other->blockhash_);
    std::swap(height_, other->height_);
    std::swap(length_, other->length_);
    std::swap(chaintype_, other->chaintype_);
    std::swap(isblock_, other->isblock_);
    std::swap(genvalue_, other->genvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Share::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Share_descriptor_;
  metadata.reflection = Share_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Type_descriptor_;
}
bool Request_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_Type Request::NONE;
const Request_Type Request::CONNECT;
const Request_Type Request::GETWORK;
const Request_Type Request::SHARE;
const Request_Type Request::STATS;
const Request_Type Request::PING;
const Request_Type Request::Type_MIN;
const Request_Type Request::Type_MAX;
const int Request::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kReqidFieldNumber;
const int Request::kVersionFieldNumber;
const int Request::kHeightFieldNumber;
const int Request::kReqnonceFieldNumber;
const int Request::kShareFieldNumber;
const int Request::kStatsFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  share_ = const_cast< ::pool::proto::Share*>(&::pool::proto::Share::default_instance());
  stats_ = const_cast< ::pool::proto::ClientStats*>(&::pool::proto::ClientStats::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  reqid_ = 0u;
  version_ = 0u;
  height_ = 0u;
  reqnonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  share_ = NULL;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (reqnonce_ != &::google::protobuf::internal::kEmptyString) {
    delete reqnonce_;
  }
  if (this != default_instance_) {
    delete share_;
    delete stats_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    reqid_ = 0u;
    version_ = 0u;
    height_ = 0u;
    if (has_reqnonce()) {
      if (reqnonce_ != &::google::protobuf::internal::kEmptyString) {
        reqnonce_->clear();
      }
    }
    if (has_share()) {
      if (share_ != NULL) share_->::pool::proto::Share::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::pool::proto::ClientStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_version;
        break;
      }

      // optional uint32 version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_height;
        break;
      }

      // optional uint32 height = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_reqnonce;
        break;
      }

      // optional bytes reqnonce = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqnonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqnonce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_share;
        break;
      }

      // optional .pool.proto.Share share = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_share:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_stats;
        break;
      }

      // optional .pool.proto.ClientStats stats = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // optional uint32 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->version(), output);
  }

  // optional uint32 height = 11;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->height(), output);
  }

  // optional bytes reqnonce = 12;
  if (has_reqnonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->reqnonce(), output);
  }

  // optional .pool.proto.Share share = 20;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->share(), output);
  }

  // optional .pool.proto.ClientStats stats = 21;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // optional uint32 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->version(), target);
  }

  // optional uint32 height = 11;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->height(), target);
  }

  // optional bytes reqnonce = 12;
  if (has_reqnonce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->reqnonce(), target);
  }

  // optional .pool.proto.Share share = 20;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->share(), target);
  }

  // optional .pool.proto.ClientStats stats = 21;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pool.proto.Request.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

    // optional uint32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 height = 11;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional bytes reqnonce = 12;
    if (has_reqnonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqnonce());
    }

    // optional .pool.proto.Share share = 20;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->share());
    }

    // optional .pool.proto.ClientStats stats = 21;
    if (has_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_reqnonce()) {
      set_reqnonce(from.reqnonce());
    }
    if (from.has_share()) {
      mutable_share()->::pool::proto::Share::MergeFrom(from.share());
    }
    if (from.has_stats()) {
      mutable_stats()->::pool::proto::ClientStats::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_share()) {
    if (!this->share().IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(reqid_, other->reqid_);
    std::swap(version_, other->version_);
    std::swap(height_, other->height_);
    std::swap(reqnonce_, other->reqnonce_);
    std::swap(share_, other->share_);
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kHostFieldNumber;
const int ServerInfo::kRouterFieldNumber;
const int ServerInfo::kPubFieldNumber;
const int ServerInfo::kTargetFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  router_ = 0u;
  pub_ = 0u;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    router_ = 0u;
    pub_ = 0u;
    target_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_router;
        break;
      }

      // required uint32 router = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_router:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_)));
          set_has_router();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pub;
        break;
      }

      // required uint32 pub = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pub_)));
          set_has_pub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target;
        break;
      }

      // required uint32 target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // required uint32 router = 2;
  if (has_router()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->router(), output);
  }

  // required uint32 pub = 3;
  if (has_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pub(), output);
  }

  // required uint32 target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required uint32 router = 2;
  if (has_router()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->router(), target);
  }

  // required uint32 pub = 3;
  if (has_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pub(), target);
  }

  // required uint32 target = 4;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required uint32 router = 2;
    if (has_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->router());
    }

    // required uint32 pub = 3;
    if (has_pub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pub());
    }

    // required uint32 target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_router()) {
      set_router(from.router());
    }
    if (from.has_pub()) {
      set_pub(from.pub());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(router_, other->router_);
    std::swap(pub_, other->pub_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Work::kHeightFieldNumber;
const int Work::kMerkleFieldNumber;
const int Work::kTimeFieldNumber;
const int Work::kBitsFieldNumber;
#endif  // !_MSC_VER

Work::Work()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Work::InitAsDefaultInstance() {
}

Work::Work(const Work& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Work::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0u;
  merkle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  bits_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Work::~Work() {
  SharedDtor();
}

void Work::SharedDtor() {
  if (merkle_ != &::google::protobuf::internal::kEmptyString) {
    delete merkle_;
  }
  if (this != default_instance_) {
  }
}

void Work::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Work::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Work_descriptor_;
}

const Work& Work::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Work* Work::default_instance_ = NULL;

Work* Work::New() const {
  return new Work;
}

void Work::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0u;
    if (has_merkle()) {
      if (merkle_ != &::google::protobuf::internal::kEmptyString) {
        merkle_->clear();
      }
    }
    time_ = 0u;
    bits_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Work::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_merkle;
        break;
      }

      // required string merkle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merkle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->merkle().data(), this->merkle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bits;
        break;
      }

      // required uint32 bits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Work::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // required string merkle = 2;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->merkle(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 bits = 4;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Work::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // required string merkle = 2;
  if (has_merkle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->merkle().data(), this->merkle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->merkle(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 bits = 4;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Work::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required string merkle = 2;
    if (has_merkle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->merkle());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 bits = 4;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Work::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Work* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Work*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Work::MergeFrom(const Work& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_merkle()) {
      set_merkle(from.merkle());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Work::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Work::CopyFrom(const Work& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Work::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Work::Swap(Work* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(merkle_, other->merkle_);
    std::swap(time_, other->time_);
    std::swap(bits_, other->bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Work::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Work_descriptor_;
  metadata.reflection = Work_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Reply_ErrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_ErrType_descriptor_;
}
bool Reply_ErrType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Reply_ErrType Reply::NONE;
const Reply_ErrType Reply::VERSION;
const Reply_ErrType Reply::HEIGHT;
const Reply_ErrType Reply::REQNONCE;
const Reply_ErrType Reply::STALE;
const Reply_ErrType Reply::INVALID;
const Reply_ErrType Reply::DUPLICATE;
const Reply_ErrType Reply::ErrType_MIN;
const Reply_ErrType Reply::ErrType_MAX;
const int Reply::ErrType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Reply::kTypeFieldNumber;
const int Reply::kReqidFieldNumber;
const int Reply::kErrorFieldNumber;
const int Reply::kErrstrFieldNumber;
const int Reply::kSinfoFieldNumber;
const int Reply::kWorkFieldNumber;
const int Reply::kBlockFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reply::InitAsDefaultInstance() {
  sinfo_ = const_cast< ::pool::proto::ServerInfo*>(&::pool::proto::ServerInfo::default_instance());
  work_ = const_cast< ::pool::proto::Work*>(&::pool::proto::Work::default_instance());
  block_ = const_cast< ::pool::proto::Block*>(&::pool::proto::Block::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  reqid_ = 0u;
  error_ = 0;
  errstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sinfo_ = NULL;
  work_ = NULL;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply::~Reply() {
  SharedDtor();
}

void Reply::SharedDtor() {
  if (errstr_ != &::google::protobuf::internal::kEmptyString) {
    delete errstr_;
  }
  if (this != default_instance_) {
    delete sinfo_;
    delete work_;
    delete block_;
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    reqid_ = 0u;
    error_ = 0;
    if (has_errstr()) {
      if (errstr_ != &::google::protobuf::internal::kEmptyString) {
        errstr_->clear();
      }
    }
    if (has_sinfo()) {
      if (sinfo_ != NULL) sinfo_->::pool::proto::ServerInfo::Clear();
    }
    if (has_work()) {
      if (work_ != NULL) work_->::pool::proto::Work::Clear();
    }
    if (has_block()) {
      if (block_ != NULL) block_->::pool::proto::Block::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_type(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_error;
        break;
      }

      // required .pool.proto.Reply.ErrType error = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Reply_ErrType_IsValid(value)) {
            set_error(static_cast< ::pool::proto::Reply_ErrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_errstr;
        break;
      }

      // optional string errstr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errstr().data(), this->errstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_sinfo;
        break;
      }

      // optional .pool.proto.ServerInfo sinfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_work;
        break;
      }

      // optional .pool.proto.Work work = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_work()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_block;
        break;
      }

      // optional .pool.proto.Block block = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // required .pool.proto.Reply.ErrType error = 10;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->error(), output);
  }

  // optional string errstr = 11;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->errstr(), output);
  }

  // optional .pool.proto.ServerInfo sinfo = 20;
  if (has_sinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->sinfo(), output);
  }

  // optional .pool.proto.Work work = 21;
  if (has_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->work(), output);
  }

  // optional .pool.proto.Block block = 22;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pool.proto.Request.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // required .pool.proto.Reply.ErrType error = 10;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->error(), target);
  }

  // optional string errstr = 11;
  if (has_errstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errstr().data(), this->errstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->errstr(), target);
  }

  // optional .pool.proto.ServerInfo sinfo = 20;
  if (has_sinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->sinfo(), target);
  }

  // optional .pool.proto.Work work = 21;
  if (has_work()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->work(), target);
  }

  // optional .pool.proto.Block block = 22;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pool.proto.Request.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

    // required .pool.proto.Reply.ErrType error = 10;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional string errstr = 11;
    if (has_errstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errstr());
    }

    // optional .pool.proto.ServerInfo sinfo = 20;
    if (has_sinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sinfo());
    }

    // optional .pool.proto.Work work = 21;
    if (has_work()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->work());
    }

    // optional .pool.proto.Block block = 22;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_errstr()) {
      set_errstr(from.errstr());
    }
    if (from.has_sinfo()) {
      mutable_sinfo()->::pool::proto::ServerInfo::MergeFrom(from.sinfo());
    }
    if (from.has_work()) {
      mutable_work()->::pool::proto::Work::MergeFrom(from.work());
    }
    if (from.has_block()) {
      mutable_block()->::pool::proto::Block::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_sinfo()) {
    if (!this->sinfo().IsInitialized()) return false;
  }
  if (has_work()) {
    if (!this->work().IsInitialized()) return false;
  }
  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(reqid_, other->reqid_);
    std::swap(error_, other->error_);
    std::swap(errstr_, other->errstr_);
    std::swap(sinfo_, other->sinfo_);
    std::swap(work_, other->work_);
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqStats::kReqtypeFieldNumber;
const int ReqStats::kErrtypeFieldNumber;
const int ReqStats::kCountFieldNumber;
#endif  // !_MSC_VER

ReqStats::ReqStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqStats::InitAsDefaultInstance() {
}

ReqStats::ReqStats(const ReqStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqStats::SharedCtor() {
  _cached_size_ = 0;
  reqtype_ = 0;
  errtype_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqStats::~ReqStats() {
  SharedDtor();
}

void ReqStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqStats_descriptor_;
}

const ReqStats& ReqStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ReqStats* ReqStats::default_instance_ = NULL;

ReqStats* ReqStats::New() const {
  return new ReqStats;
}

void ReqStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqtype_ = 0;
    errtype_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pool.proto.Request.Type reqtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Request_Type_IsValid(value)) {
            set_reqtype(static_cast< ::pool::proto::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errtype;
        break;
      }

      // required .pool.proto.Reply.ErrType errtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pool::proto::Reply_ErrType_IsValid(value)) {
            set_errtype(static_cast< ::pool::proto::Reply_ErrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pool.proto.Request.Type reqtype = 1;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reqtype(), output);
  }

  // required .pool.proto.Reply.ErrType errtype = 2;
  if (has_errtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errtype(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pool.proto.Request.Type reqtype = 1;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reqtype(), target);
  }

  // required .pool.proto.Reply.ErrType errtype = 2;
  if (has_errtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errtype(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pool.proto.Request.Type reqtype = 1;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reqtype());
    }

    // required .pool.proto.Reply.ErrType errtype = 2;
    if (has_errtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errtype());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqStats::MergeFrom(const ReqStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_errtype()) {
      set_errtype(from.errtype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStats::CopyFrom(const ReqStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqStats::Swap(ReqStats* other) {
  if (other != this) {
    std::swap(reqtype_, other->reqtype_);
    std::swap(errtype_, other->errtype_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqStats_descriptor_;
  metadata.reflection = ReqStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerStats::kNameFieldNumber;
const int ServerStats::kThreadFieldNumber;
const int ServerStats::kWorkersFieldNumber;
const int ServerStats::kLatencyFieldNumber;
const int ServerStats::kCpdFieldNumber;
const int ServerStats::kReqstatsFieldNumber;
#endif  // !_MSC_VER

ServerStats::ServerStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStats::InitAsDefaultInstance() {
}

ServerStats::ServerStats(const ServerStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStats::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thread_ = 0u;
  workers_ = 0u;
  latency_ = 0u;
  cpd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStats::~ServerStats() {
  SharedDtor();
}

void ServerStats::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStats_descriptor_;
}

const ServerStats& ServerStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

ServerStats* ServerStats::default_instance_ = NULL;

ServerStats* ServerStats::New() const {
  return new ServerStats;
}

void ServerStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    thread_ = 0u;
    workers_ = 0u;
    latency_ = 0u;
    cpd_ = 0;
  }
  reqstats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread;
        break;
      }

      // required uint32 thread = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_)));
          set_has_thread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_workers;
        break;
      }

      // required uint32 workers = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workers_)));
          set_has_workers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_latency;
        break;
      }

      // required uint32 latency = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
          set_has_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_cpd;
        break;
      }

      // required float cpd = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpd_)));
          set_has_cpd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reqstats;
        break;
      }

      // repeated .pool.proto.ReqStats reqstats = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reqstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reqstats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 thread = 2;
  if (has_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread(), output);
  }

  // required uint32 workers = 10;
  if (has_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->workers(), output);
  }

  // required uint32 latency = 11;
  if (has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->latency(), output);
  }

  // required float cpd = 12;
  if (has_cpd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cpd(), output);
  }

  // repeated .pool.proto.ReqStats reqstats = 20;
  for (int i = 0; i < this->reqstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->reqstats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 thread = 2;
  if (has_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread(), target);
  }

  // required uint32 workers = 10;
  if (has_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->workers(), target);
  }

  // required uint32 latency = 11;
  if (has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->latency(), target);
  }

  // required float cpd = 12;
  if (has_cpd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cpd(), target);
  }

  // repeated .pool.proto.ReqStats reqstats = 20;
  for (int i = 0; i < this->reqstats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->reqstats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 thread = 2;
    if (has_thread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread());
    }

    // required uint32 workers = 10;
    if (has_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workers());
    }

    // required uint32 latency = 11;
    if (has_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latency());
    }

    // required float cpd = 12;
    if (has_cpd()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pool.proto.ReqStats reqstats = 20;
  total_size += 2 * this->reqstats_size();
  for (int i = 0; i < this->reqstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reqstats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStats::MergeFrom(const ServerStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  reqstats_.MergeFrom(from.reqstats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_thread()) {
      set_thread(from.thread());
    }
    if (from.has_workers()) {
      set_workers(from.workers());
    }
    if (from.has_latency()) {
      set_latency(from.latency());
    }
    if (from.has_cpd()) {
      set_cpd(from.cpd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStats::CopyFrom(const ServerStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < reqstats_size(); i++) {
    if (!this->reqstats(i).IsInitialized()) return false;
  }
  return true;
}

void ServerStats::Swap(ServerStats* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(thread_, other->thread_);
    std::swap(workers_, other->workers_);
    std::swap(latency_, other->latency_);
    std::swap(cpd_, other->cpd_);
    reqstats_.Swap(&other->reqstats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStats_descriptor_;
  metadata.reflection = ServerStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kShareFieldNumber;
const int Data::kClientstatsFieldNumber;
const int Data::kServerstatsFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
  share_ = const_cast< ::pool::proto::Share*>(&::pool::proto::Share::default_instance());
  clientstats_ = const_cast< ::pool::proto::ClientStats*>(&::pool::proto::ClientStats::default_instance());
  serverstats_ = const_cast< ::pool::proto::ServerStats*>(&::pool::proto::ServerStats::default_instance());
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  share_ = NULL;
  clientstats_ = NULL;
  serverstats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
    delete share_;
    delete clientstats_;
    delete serverstats_;
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_share()) {
      if (share_ != NULL) share_->::pool::proto::Share::Clear();
    }
    if (has_clientstats()) {
      if (clientstats_ != NULL) clientstats_->::pool::proto::ClientStats::Clear();
    }
    if (has_serverstats()) {
      if (serverstats_ != NULL) serverstats_->::pool::proto::ServerStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pool.proto.Share share = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientstats;
        break;
      }

      // optional .pool.proto.ClientStats clientstats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serverstats;
        break;
      }

      // optional .pool.proto.ServerStats serverstats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverstats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pool.proto.Share share = 1;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->share(), output);
  }

  // optional .pool.proto.ClientStats clientstats = 2;
  if (has_clientstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clientstats(), output);
  }

  // optional .pool.proto.ServerStats serverstats = 3;
  if (has_serverstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->serverstats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pool.proto.Share share = 1;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->share(), target);
  }

  // optional .pool.proto.ClientStats clientstats = 2;
  if (has_clientstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clientstats(), target);
  }

  // optional .pool.proto.ServerStats serverstats = 3;
  if (has_serverstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->serverstats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pool.proto.Share share = 1;
    if (has_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->share());
    }

    // optional .pool.proto.ClientStats clientstats = 2;
    if (has_clientstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientstats());
    }

    // optional .pool.proto.ServerStats serverstats = 3;
    if (has_serverstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverstats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_share()) {
      mutable_share()->::pool::proto::Share::MergeFrom(from.share());
    }
    if (from.has_clientstats()) {
      mutable_clientstats()->::pool::proto::ClientStats::MergeFrom(from.clientstats());
    }
    if (from.has_serverstats()) {
      mutable_serverstats()->::pool::proto::ServerStats::MergeFrom(from.serverstats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  if (has_share()) {
    if (!this->share().IsInitialized()) return false;
  }
  if (has_clientstats()) {
    if (!this->clientstats().IsInitialized()) return false;
  }
  if (has_serverstats()) {
    if (!this->serverstats().IsInitialized()) return false;
  }
  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(share_, other->share_);
    std::swap(clientstats_, other->clientstats_);
    std::swap(serverstats_, other->serverstats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pool

// @@protoc_insertion_point(global_scope)
